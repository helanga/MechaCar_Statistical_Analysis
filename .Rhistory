> x <- 3
x <- 3
x <- 6
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
?read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
library(jsonlite)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
View(demo_table2)
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
demo_table[3,"Year"]
View(demo_table)
View(demo_table)
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
?subset()
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
?subset()
?sample()
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
View(demo_table)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
view(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
view(summarize_demo)
?gather()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
view(demo_table3)
demo_table4 <- read.csv('Vehicle_Data.csv',check.names = F,stringsAsFactors = F)
demo_table4 <- read.csv('Vehicle_Data.csv',check.names = F,stringsAsFactors = F)
demo_table4 <- read.xlsx('Vehicle_Data.xlsx',check.names = F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
?spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")
view(wide_table)
?ggplot()
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels\
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
number <- 45
numeric_vector <- c(5,7,7)
numeric_vector[2]
High <- c(23,43,32,44,56)
Medium <- c(54,65,78,89)
Low <- c(99,78,67,56)
High <- c(23,43,32,44,56)
Medium <- c(54,65,78,89)
Low <- c(99,78,67,56)
data1 <- data.frame(High,Medium,Low)
High <- c(23,43,32,44)
data1 <- data.frame(High,Medium,Low)
data1
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
view(mpg_summary)
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)")  #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
head(mpg)
head(mpg)
plt + geom_bar() #plot a bar plot
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
students <- c(helanga,Revathi,Dennis,Uma)
print(students)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(dplyr)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
library(jsonlite)
?fromJSON()\
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
demo_table[3,"Year"]
demo_table$"Vehicle_Class"
View(demo_table)
filter_table <- demo_table2[demo_table2$price > 10000,]
source("C:/Helanga/Canvas/Module 15 R/R_Analysis/01_Demo/demoscr1.R")
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(demo_table2)
View(filter_table2)
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
View(demo_table)
source("C:/Helanga/Canvas/Module 15 R/R_Analysis/01_Demo/mutatefunction.R")
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
View(demo_table)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
View(summarize_demo)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(long_table)
table <-demo_table3[,order(colnames(wide_table))]
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label
theme(axis.text.x=element_text(angle=45,hjust=1))
View(demo_table3)
View(demo_table2)
View(demo_table3)
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
g_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
g_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
View(g_summary)
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plo
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
setwd("C:/Helanga/Canvas/Module 15 R/Sample Vs Population")
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
plt + geom_density()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50)
sample_table2 <- population_table %>% sample_n(50)
View(sample_table)
View(sample_table2)
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
mpg_data <- read.csv
mpg_1999 <- mpg_data %>% filter(year==1999)
mpg_data <- read.csv('mpg_modified.csv')
mpg_1999 <- mpg_data %>% filter(year==1999)
mpg_2008 <- mpg_data %>% filter(year==2008)
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
mtcars_filt <- mtcars[,c("hp","cyl")]
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
setwd("C:/Helanga/Canvas/Module 15 R/15-2-Student_Resources")
sardines <- read.csv("sardines.csv")
setwd("C:/Helanga/Canvas/Module 15 R/15-2-Student_Resources/15-2-Student_Resources/03-Stu_Sardines/Unsolved")
sardines <- read.csv("sardines.csv")
sardines <- read.csv(file="../Resources/sardines.csv")
View(sardines)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
View(demo_table3)
View(long_table)
View(demo_table3)
View(long_table)
View(sardines)
View(sardines)
filter_sardines <- subset(sardines, location = 1)
filter_sardines2 <- subset(sardines, location = 2)
mean("filter_sardines")
mean((filter_sardines))
mean((filter_sardines))
mean((filter_sardines2))
mean[[filter_sardines]]
View(filter_sardines2)
View(filter_sardines2)
View(filter_sardines2)
setwd("C:/Helanga/Canvas/Module 15 R/15-2-Student_Resources/15-2-Student_Resources/05-Stu_ANOVA")
hair <- read.csv(file="../Resources/hair.csv")
setwd("C:/Helanga/Canvas/Module 15 R/15-2-Student_Resources/15-2-Student_Resources/05-Stu_ANOVA/Unsolved")
hair <- read.csv(file="../Resources/hair.csv")
View(hair)
View(hair)
View(hair)
LightBlond = subset(hair, Haircolour = LightBlond)
View(hair)
LightBrunette = subset(hair, Haircolour = LightBrunette)
DarkBlond = subset(hair, Haircolour = DarkBlond)
aov(hp ~ cyl,data=mtcars_filt)
aov(hp ~ cyl,data=hair)
mtcars_filt <- hair[,c("hp","cyl")]
setwd("C:/Helanga/Canvas/Module 15 R/Challenge/MechaCar_Statistical_Analysis")
library(dplyr)
MechaCar_mpg <- read.csv(file="../Data/MechaCar_mpg.csv",check.names =F,stringsAsFactors = F)
setwd("C:/Helanga/Canvas/Module 15 R/Challenge/MechaCar_Statistical_Analysis")
MechaCar_mpg <- read.csv(file="../Data/MechaCar_mpg.csv",check.names =F,stringsAsFactors = F)
MechaCar_mpg <- read.csv(file="./Data/MechaCar_mpg.csv",check.names =F,stringsAsFactors = F)
View(MechaCar_mpg)
Mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angel + ground_clearance + AWD,data=MechaCar_mpg)
vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_mpg)
Mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_mpg)
Mecha_lm
summery(Mecha_lm)
summary(Mecha_lm)
summary(Mecha_lm)$r.squared
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
setwd("C:/Helanga/Canvas/Module 15 R/Sample Vs Population")
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point(
plt + geom_point()
cor(mtcars$hp,mtcars$qsec)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
plt + geom_point()
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
lm(qsec ~ hp,mtcars) #create linear model
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)']
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
sample_table <- population_table %>% sample_n(50)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
plt + geom_density()
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
plt + geom_density()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#ttest function to confirm sample does not have bires
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
setwd("C:/Helanga/Canvas/Module 15 R/Challenge/MechaCar_Statistical_Analysis")
MechaCar_mpg <- read.csv(file="./Data/MechaCar_mpg.csv",check.names =F,stringsAsFactors = F)
View(MechaCar_mpg)
Mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_mpg)
Mecha_lm
summary(Mecha_lm)
summary(Mecha_lm)$r.squared
#load the dplyr package
library(dplyr)
#Import and read in the MechaCar_mpg.csv file as a dataframe
MechaCar_mpg <- read.csv(file="./Data/MechaCar_mpg.csv",check.names =F,stringsAsFactors = F)
#linear regression ,pass in all six variables
Mecha_lsummary(Mecha_lm)$r.squaredm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar_mpg)
Mecha_lm
# To determine p-value and r-square
summary(Mecha_lm)
Suspension_Coil <- read.csv(file="./Data/Suspension_Coil.csv",check.names =F,stringsAsFactors = F)
View(Suspension_Coil)
summarize_Suspension_Coil <- Suspension_Coil %>% group_by(condition) %>% summarize(PSI=mean(odometer), .groups = 'keep')
total_summary <- Suspension_Coil %>%  summarize(MEAN=mean(PSI),Median=Median(PSI),VArience=var(PSI),Std_Dev=sd(PSI))
total summery
total_summary <- Suspension_Coil %>%  summarize(MEAN=mean(PSI),Median=Median(PSI),VArience=var(PSI),Std_Dev=sd(PSI))
total_summery
total_summary <- Suspension_Coil %>%  summarize(MEAN=mean(PSI),Median=Median(PSI),VArience=var(PSI),Std_Dev=sd(PSI))
total_summary
total_summary <- Suspension_Coil %>%  summarize(MEAN=mean(PSI),Median=Median(PSI),VArience=var(PSI),Std_Dev=sd(PSI))
total_summary <- Suspension_Coil %>%  summarize(MEAN=mean(PSI),Median=median(PSI),VArience=var(PSI),Std_Dev=sd(PSI))
total_summary
View(total_summary)
lot_summary <- Suspension_Coil %>% group_by(PSI) %>% summarize(MEAN=mean(PSI),Median=median(PSI),VArience=var(PSI),Std_Dev=sd(PSI), .groups = 'keep')
View(lot_summary)
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(MEAN=mean(PSI),Median=median(PSI),VArience=var(PSI),Std_Dev=sd(PSI), .groups = 'keep')
View(lot_summary)
t.test(Suspension_Coil$PSI,mu=1500)
View(lot_summary)
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
t.test(Suspension_Coil$PSI,mu=1500)
View(total_summary)
View(Suspension_Coil)
t.test(subset(Suspension_Coil, Manufacturing_Lot=="Lot1")$PSI, mu=1500)
t.test(subset(Suspension_Coil, Manufacturing_Lot=="Lot2")$PSI, mu=1500)
t.test(subset(Suspension_Coil, Manufacturing_Lot=="Lot3")$PSI, mu=1500)
View(MechaCar_mpg)
